traffic analysis using cnn
import cv2
import numpy as np

net = cv2.dnn.readNet("yolov3.weights", "yolov3.cfg")
classes = []
with open("coco.names", "r") as f:
    classes = [line.strip() for line in f.readlines()]

img = cv2.imread("image.jpg")
blob = cv2.dnn.blobFromImage(img, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
net.setInput(blob)
outs = net.forward(net.getUnconnectedOutLayersNames())

2.fraud detection 

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

Load data
data = pd.read_csv('share_market_data.csv')

Preprocess data
data = data.dropna()  # handle missing values
data['feature1'] = data['close_price'] / data['open_price']  

3.rnn
from keras.models import Sequential
from keras.layers import Dense, SimpleRNN
import numpy as np

Generate sample data
X = np.random.rand(100, 10, 1)
y = np.random.randint(0, 2, 100)

Define RNN model
model = Sequential()
model.add(SimpleRNN(50, input_shape=(10, 1)))
model.add(Dense(1, activation='sigmoid'))
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

Train model
model.fit(X, y, epochs=50, batch_size=32, validation_split=0.2)

Evaluate model
loss, accuracy = model.evaluate(X, y)
print(f'Loss: {loss:.3f}, Accuracy: {accuracy:.3f}')

Split data
X_train, X_test, y_train, y_test = train_test_split(data.drop('label', axis=1), data['label'], test_size=0.2, random_state=42)

Train model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

Evaluate model
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:")
print(classification_report(y_test, y_pred))
